/*  
 * Copyright 2010-2019 Tocean Group.  
 * 版权：商业代码，未经许可，禁止任何形式拷贝、传播及使用
 * （本公司提供源代码只允许甲方作为系统维护、升级之用，未经我司授权，不得用作开发其他系统）
 * 文件名：${className}Controller.java
 * 描述：  
 * 修改人： ${author}
 * 修改时间：${datetime}
 * 跟踪单号：  
 * 修改单号：  
 * 修改内容：  
 */
package ${package}.${moduleName}.controller;

import java.util.List;
// import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.service.${className}Service;

import com.toceansoft.common.utils.DynamicCriteriaUtils;
import com.toceansoft.common.utils.PageUtils;
import com.toceansoft.common.utils.Query;
import com.toceansoft.common.utils.R;
import com.toceansoft.common.vo.DynamicCriteria;
import com.toceansoft.common.vo.QueryVo;
import com.toceansoft.common.vo.QueryVoExt;

import lombok.extern.slf4j.Slf4j;

/**
 * ${comments}
 * 
 * @author ${author}
 */
@RestController
@Slf4j
@RequestMapping("/${moduleName}")
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 列表
     *
	 * @param queryVo
	 *            QueryVo
	 * @return R
     */
    @GetMapping("/${pathName}")
    // 如果需要权限控制，取消下面注释
    // @RequiresPermissions("${moduleName}:${pathName}:list")
    public R list(QueryVo queryVo) {
        //查询列表数据
        log.debug("enter list.");
        Query query = new Query(queryVo);

        List<${className}Entity> ${classname}List = ${classname}Service.queryList(query);
        int total = ${classname}Service.queryTotal(query);

        PageUtils pageUtil = new PageUtils(${classname}List, total, query.getLimit(), query.getPage());

        return R.ok().put("page", pageUtil);
    }
    
    /**
     * 列表
     *
	 * @param queryVoExt
	 *            QueryVoExt
	 * @return R
     */
    @GetMapping("/${pathName}/condition")
    // @RequiresPermissions("${moduleName}:${pathName}:list")
    public R listByCondition(QueryVoExt queryVoExt) {
        //查询列表数据
        log.debug("enter listByCondition.");
        log.debug("search:" + queryVoExt.getSearch());
		DynamicCriteria dynamicCriteria = DynamicCriteriaUtils.getDynamicCriteria(queryVoExt);

        List<${className}Entity> ${classname}List = ${classname}Service.queryListByCondition(dynamicCriteria);
        int total = ${classname}Service.queryTotalByCondition(dynamicCriteria);

        PageUtils pageUtil = new PageUtils(${classname}List, total, queryVoExt.getLimit(), queryVoExt.getPage());

        return R.ok().put("page", pageUtil);
    }


    /**
     * 查询（指定对象）
     * @param ${pk.attrname} ${pk.attrType}
     * @return R
     */
    @GetMapping("/${pathName}/{${pk.attrname}}")
    // @RequiresPermissions("${moduleName}:${pathName}:info")
    public R info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}) {
      log.debug("enter info.");
			${className}Entity ${classname} = ${classname}Service.queryObject(${pk.attrname});

        return R.ok().put("${classname}", ${classname});
    }

    /**
     * 保存
     * @param ${classname} ${className}Entity
     * @return R
     */
    @PostMapping("/${pathName}")
    // @RequiresPermissions("${moduleName}:${pathName}:save")
    public R save(@RequestBody ${className}Entity ${classname}) {
         log.debug("enter save.");
			${classname}Service.save(${classname});

        return R.ok();
    }
    
    /**
     * 批量保存
     * @param item List<${className}Entity>
     * @return R
     */
    @PostMapping("/${pathName}/batch")
    // @RequiresPermissions("${moduleName}:${pathName}:saveBatch")
    public R saveBatch(@RequestBody List<${className}Entity> item) {
         log.debug("enter saveBatch.");
			${classname}Service.saveBatch(item);

        return R.ok();
    }

    /**
     * 修改
     * @param ${classname} ${className}Entity
     * @return R
     */
    @PutMapping("/${pathName}")
    // @RequiresPermissions("${moduleName}:${pathName}:update")
    public R update(@RequestBody ${className}Entity ${classname}) {
         log.debug("enter update.");
			${classname}Service.update(${classname});

        return R.ok();
    }
    /**
     * 修改
     * @param item List<${className}Entity>
     * @return R
     */
    @PutMapping("/${pathName}/batch")
    // @RequiresPermissions("${moduleName}:${pathName}:updateBatch")
    public R updateBatch(@RequestBody List<${className}Entity> item) {
         log.debug("enter updateBatch.");
			${classname}Service.updateBatch(item);

        return R.ok();
    }

    /**
     * 删除
     * @param ${pk.attrname}s ${pk.attrType}[]
     * @return R
     */
    @DeleteMapping("/${pathName}")
    // @RequiresPermissions("${moduleName}:${pathName}:delete")
    public R delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s) {
         log.debug("enter delete.");
			${classname}Service.deleteBatch(${pk.attrname}s);

        return R.ok();
    }
	
}
